# Main Concepts

## Verify


### What it does?

The entry point to ApprovalTests is almost always some variation of a [Verify method](../Verify.md).
These helper methods make it easy to test many common scenarios.

This method will:

1. Serialize the object passed to it to the `.received.` file
1. Compare it to the `.approved.` file
1. Launch a DiffTool on failure


### How it does it?

Let's take the example:

<!-- snippet: simple_verify -->
<a id='snippet-simple_verify'></a>
```cs
[Test]
public void Text() =>
    Approvals.Verify("should be approved");
```
<sup><a href='/src/ApprovalTests.Tests/ApprovalsTest.cs#L6-L10' title='Snippet source file'>snippet source</a> | <a href='#snippet-simple_verify' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->

This call brings together 3 things + default Approver to produce a `.received.` file which is compared to an `.approved.` file.

![](MainConceptsSimplified.svg)

**Note:** This is a simplified version of what ApprovalTests does. You can see a [full picture here](MainConceptsComplete.svg)


### General usage

You will be using a Verify calls all the time with the ApprovalTests.
The more complicated the object you are trying to test, the more you will want to use a Verify.


### Why would you customize it?

It is fairly common to make a custom Verify call.
Anytime you find a repeated block

```cs
// Do something to an Object
// Print an Object ToString
// Verify the ToString
```

You will want to extract a custom Verify helper method

```cs
public static void VerifyMyObject(MyObject o)
{
    // Do something to an Object
    // Print an Object ToString
    // Verify the ToString
}
```

**Note:** Because ApprovalTests allow testing of whole objects, you will often find this type of duplication showing more often than a traditional Unit Testing. This is because developers usually add extra complexity to their test scenarios to make results easier to test with a assert. This traditional complexity makes the duplication hard to see. All of the [Verify methods](../Verify.md) were created by following the above pattern.


## Writers


### What it does?

[Writers](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Core/IApprovalWriter.cs) are responsible for writing the `.received.` file to the disk.
They also determine the extension for both `.received.` and `.approved.` files.


### How it does it?

Eventually, all Verify methods call:
<!-- snippet: complete_verify_call -->
<a id='snippet-complete_verify_call'></a>
```cs
public static void Verify(IApprovalWriter writer, IApprovalNamer namer, IApprovalFailureReporter reporter)
```
<sup><a href='/src/ApprovalTests/Approvals.cs#L34-L36' title='Snippet source file'>snippet source</a> | <a href='#snippet-complete_verify_call' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->

Most of the time this is hidden in an underlying a Verify call.


### General usage

The vast majority of the time you will not interact directly with the Writers.


### Why would you customize it?

If you want it to approve something that writes to a new type of a binary file, you would create a custom Writer.

If you simply wanted to format text this is usually done in a separate step before calling:

<!-- snippet: verify_with_extension -->
<a id='snippet-verify_with_extension'></a>
```cs
public static void VerifyWithExtension(string text, string fileExtensionWithDot, Func<string, string> scrubber = null)
```
<sup><a href='/src/ApprovalTests/Approvals.cs#L137-L139' title='Snippet source file'>snippet source</a> | <a href='#snippet-verify_with_extension' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->


## Namers


### What it does?

[Namers](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Core/IApprovalNamer.cs) are responsible for figuring out what the `.approved.` and `.received.` files should be called and where they are located.


### How it does it?

This is primarily done by inspecting a stack trace to detect your test framework's attributes.

The naming pattern is: `{ClassName}.{MethodName}.{AdditionalInformation(optional)}.approved.{Extension}`


### General usage

The vast majority of the time you will not interact directly with the Namers.


### Why would you customize it?

To **support a new testing framework** is a main reason you would create your own Namer.


## Reporters


### What it does?

[Reporters](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Core/IApprovalReporter.cs) are called only on failure.
They are responsible for things such as opening Diff tools, copying commands to your clipboard or anything else that can help you determine what went wrong and so you can fix it.


### How it does it?

Reporters are very simple. They are called with a received and approved file names on failure. Usually, they make a call to a command line using these filenames as parameters.

For example: `YourDiffTool filename1 filename2`


### General usage

It is very common to switch between Reporters for both personal preferences (a preferred Diff tool) and contextual preferences (at this moment I want to...).

Because using the right Reporter at the right time is so important, there are multiple places they can be configured, including which Reporter is the default Reporter.


### Why would you customize it?

There are two reasons you want to write your custom Reporter:

1. To support a tool you like that is not currently supported
1. To change the order in which Diff tools are selected


## Approval Output Files


### What it does?

The core of Approvals is that your result and expectations are saved in output files. These files allow us to verify expectations in future runs as well as use external tools.


### How it does it?

Approvals create two files:

* Actual: `ClassName.TestMethodName.received.txt`
* Expected: `ClassName.TestMethodName.approved.txt`

The actual files (`.received.`) are deleted on success and should never be checked on your source control.
The expected files (`.approved.`) need to be checked into your source control.


### General usage

Every ApprovalTest will be generating these files.


### Why would you customize it

The two main ways of customizing the output files are:

1. To store all the output files in the subdirectory
1. Adding additional information for Data Driven Tests or [machine specific tests](../EnvironmentSpecificTests.md)


<!--
GENERATED FILE - DO NOT EDIT
This file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).
Source File: /docs/ApprovalTests/mdsource/Verify.source.md
To change this file edit the source file and then run MarkdownSnippets.
-->

# Verify

<!-- toc -->
## Contents

  * [Verify](#verify)<!-- endToc -->

## Verify

@@ -1,53 +0,0 @@
ï»¿ApprovalMaintenance.[VerifyNoAbandonedFiles](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Maintenance/ApprovalMaintenance.cs#L77)(String[] ignore)

Approvals.[Verify](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L46)(FileInfo receivedFilePath)

Approvals.[VerifyAll](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L206)(IDictionary&lt;K, V> dictionary)

Approvals.[VerifyBinaryFile](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L254)(Byte[] bytes, String fileExtensionWithDot)

Approvals.[VerifyException](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L192)(Exception e)

Approvals.[VerifyExceptionWithStacktrace](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L197)(Exception e)

Approvals.[VerifyFile](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L127)(String receivedFilePath)

Approvals.[VerifyHtml](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L260)(String html)

Approvals.[VerifyJson](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L270)(String json)

Approvals.[VerifyPdfFile](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L290)(String pdfFilePath)

Approvals.[VerifyWithCallback](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L137)(Object text, Action&lt;String> callBackOnFailure)

Approvals.[VerifyWithExtension](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L180)(String text, String fileExtensionWithDot, Func&lt;String, String> scrubber)

Approvals.[VerifyXml](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Approvals.cs#L265)(String xml)

Approver.[Verify](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Core/Approver.cs#L5)(IApprovalApprover approver, IApprovalFailureReporter reporter)

CombinationApprovals.[VerifyAllCombinations](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Combinations/CombinationApprovals.cs#L12)(Func&lt;A, B, C, D, E, F, G, H, I, Object> processCall, Func&lt;Object, String> resultFormatter, IEnumerable&lt;A> aList, IEnumerable&lt;B> bList, IEnumerable&lt;C> cList, IEnumerable&lt;D> dList, IEnumerable&lt;E> eList, IEnumerable&lt;F> fList, IEnumerable&lt;G> gList, IEnumerable&lt;H> hList, IEnumerable&lt;I> iList)

EmailApprovals.[Verify](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Email/EmailApprovals.cs#L13)(MailMessage email)

EmailApprovals.[VerifyScrubbed](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Email/EmailApprovals.cs#L17)(MailMessage email, Func&lt;String, String> scrubber)

EventApprovals.[VerifyEvents](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Events/EventApprovals.cs#L10)(Object value)

HtmlApprovals.[VerifyHtml](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Html/HtmlApprovals.cs#L8)(String html, Func&lt;String, String> scrubber)

HtmlApprovals.[VerifyHtmlStrict](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Html/HtmlApprovals.cs#L16)(String html)

SerializableTheory.[Verify](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/TheoryTests/SerializableTheory.cs#L9)(Object original, Action&lt;Object, Object> assertEqual)

SetApprovals.[VerifyFileAsSet](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Set/SetApprovals.cs#L40)(String filename)

SetApprovals.[VerifySet](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Set/SetApprovals.cs#L15)(IEnumerable&lt;T> enumerable, Func&lt;T, String> formatter)

ThreadSafetyTheory.[VerifyNoRaceConditions](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/TheoryTests/ThreadSafetyTheory.cs#L11)(Int32 times, Func&lt;T> caseGenerator, Func&lt;T, String> caseString, Func&lt;T, Object> possibleRaceConditionFunction, Func&lt;T, Object> knownGoodFunction)

XmlApprovals.[VerifyOrderedXml](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Xml/XmlApprovals.cs#L29)(String text, Func&lt;String, String> scrubber)

XmlApprovals.[VerifyText](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Xml/XmlApprovals.cs#L18)(String text, String fileExtensionWithoutDot, Boolean safely, Func&lt;String, String> scrubber)

XmlApprovals.[VerifyXml](https://github.com/approvals/ApprovalTests.Net/blob/master/src/ApprovalTests/Xml/XmlApprovals.cs#L10)(String xml, Func&lt;String, String> scrubber)

---

[Back to User Guide](readme.md#top)

<!--
GENERATED FILE - DO NOT EDIT
This file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).
Source File: /docs/ApprovalTests/mdsource/ReportersGettingStarted.source.md
To change this file edit the source file and then run MarkdownSnippets.
-->

# Getting Started with Reporters

<!-- toc -->
## Contents

  * [Configuring Reporters](#configuring-reporters)
    * [Launching Multiple Reporters](#launching-multiple-reporters)
  * [When to use different reporters](#when-to-use-different-reporters)
    * [Differences](#differences)
    * [Rendering](#rendering)
    * [Exploring Results](#exploring-results)
    * [Approving](#approving)<!-- endToc -->


## Configuring Reporters

Reporters are set using the `[UseReporter(typeof(YourReporter))]` attribute. This can occur in 3 different places, and will be used in order of least surprise.

1. On the method
1. On the Class
1. On the assembly

ApprovalTests suggest you make a assembly level configuration file for approvaltests named `ApprovalTestsConfig.cs`:

<!-- snippet: config_file -->
<a id='snippet-config_file'></a>
```cs
[assembly: UseReporter(typeof(DiffReporter))]
```
<sup><a href='/src/ApprovalTests.Tests/ApprovalTestsConfig.cs#L1-L4' title='Snippet source file'>snippet source</a> | <a href='#snippet-config_file' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->


### Launching Multiple Reporters

If you wanted to have multiple reporters launch on failure, you can also combine as many as you wish using the following syntax:

<!-- snippet: multiple_reporters -->
<a id='snippet-multiple_reporters'></a>
```cs
[UseReporter(typeof(DiffReporter), typeof(FileLauncherReporter))]
```
<sup><a href='/src/ApprovalTests.Tests/Html/HtmlTest.cs#L2-L4' title='Snippet source file'>snippet source</a> | <a href='#snippet-multiple_reporters' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->


## When to use different reporters

Reporters help you in different ways

1. To see differences in your test results
1. To see how a test result would render
1. To explore a test result or domain
1. To approve / manipulate a test result

Based on what you are doing, you will want to switch which reporter you are using. Maybe even use multiple reporters at a time to accomplish different roles.


### Differences

The main use for seeing differences is to use a reporter that will open a DiffTool. [Full list of supported diff tools here](Reporters.md#supported-diff-tools)


### Rendering

Let's say your test result is some HTML. In the beginning you might want to render it in a bowser to be able to see that it is indeed what you want. In this moment, try the  `FileLauncherReporter`. Which will open the `.received.` file in the application associated to it on your machine.

This is useful for many types of test results including, xml, svg, csv, html, images, sound files, etc...


### Exploring Results

Like rendering, you might need to use different tools to examine a file to see that it's what you actually want. Sometimes you need to open them in excel or other places just to play. If you don't have a reporter that will open in your desired tool (and you don't want to [build a custom one](Reporters.md#making-custom-reporters)) you might just want to use the `QuiteReporter` which will do nothing, allowing you to open whatever you need without disruption.


### Approving

DiffTools can be a great way to approve most text files (just copy everything to the `.approved.` file.) However, some DiffTools will break this because they are trying to help (prettifing, trimming or otherwise formatting the text)
The `ClipboardReporter` or `AllFailingTestsClipboardReporter` can be useful in these cases. Writing the command line text to move the files to your clipboard so you can paste them into your terminal to approve the test.


---

[Back to User Guide](readme.md#top)

<!--
GENERATED FILE - DO NOT EDIT
This file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).
Source File: /docs/ApprovalTests/mdsource/Reporters.source.md
To change this file edit the source file and then run MarkdownSnippets.
-->

# Reporters

<!-- toc -->
## Contents

  * [Using Reporters](#using-reporters)
    * [Supported Diff Tools](#supported-diff-tools)
      * [Custom Diff Tool](#custom-diff-tool)
  * [Making Custom Reporters](#making-custom-reporters)
  * [Joining Reporters](#joining-reporters)
    * [Choosing a DiffTool preference](#choosing-a-difftool-preference)
  * [Auto-Approving Reporters](#auto-approving-reporters)
  * [Continuous Integration](#continuous-integration)<!-- endToc -->


## Using Reporters

For an introduction on how to use reporters check out [ getting started with reporters ](./ReportersGettingStarted.md)


### Supported Diff Tools

ApprovalTests Diff Reporters use [DiffEngine](https://github.com/SimonCropp/DiffEngine) which supports the following [diff tools](https://github.com/SimonCropp/DiffEngine/#supported-diff-tools)


#### Custom Diff Tool

Custom Diff Tools can be added via DiffEngine. See: https://github.com/SimonCropp/Verify/blob/master/docs/diff-tool.custom.md


## Making Custom Reporters

Extend `IApprovalFailureReporter`. For example a file can be launched on failure:

<!-- snippet: FileLauncherReporter.cs -->
<a id='snippet-FileLauncherReporter.cs'></a>
```cs
namespace ApprovalTests.Reporters;

public class FileLauncherReporter : IApprovalFailureReporter
{
    public static readonly FileLauncherReporter INSTANCE = new();

    public void Report(string approved, string received)
    {
        QuietReporter.DisplayCommandLineApproval(approved, received);
        Process.Start(received);
    }
}
```
<sup><a href='/src/ApprovalTests/Reporters/FileLauncherReporter.cs#L1-L12' title='Snippet source file'>snippet source</a> | <a href='#snippet-FileLauncherReporter.cs' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->


## Joining Reporters

These classes help you combine reporters to make more powerful combinations

* FirstWorkingReporter - launch the first report for this system, only 1
* MultiReporter - launch ALL reporters


### Choosing a DiffTool preference

See [How to customize the order of DiffTools in your Reporter](howtos/CustomizingDiffToolSelectionOrder.md)

## Auto-Approving Reporters

These reporters create a commandline move file to approve the results and place it on your clipboard when a test fails.

* ClipboardReporter - This test only
* AllFailingTestsClipboardReporter - All tests (this might make a long command line)


## Continuous Integration

ApprovalTests will not launch anything if you are running on a CI machine.

Currently, we support:

<!-- snippet: continuous_integration -->
<a id='snippet-continuous_integration'></a>
```cs
TfsReporter.INSTANCE,
TfsVnextReporter.INSTANCE,
TeamCityReporter.INSTANCE,
JenkinsReporter.INSTANCE,
BambooReporter.INSTANCE,
NCrunchReporter.INSTANCE,
MyGetReporter.INSTANCE,
GoContinuousDeliveryReporter.INSTANCE,
AppVeyorReporter.INSTANCE
```
<sup><a href='/src/ApprovalTests/Reporters/DefaultFrontLoaderReporter.cs#L11-L21' title='Snippet source file'>snippet source</a> | <a href='#snippet-continuous_integration' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->

You can add to this by configuring the FrontLoadedReporter Annotation.

---

<!--
GENERATED FILE - DO NOT EDIT
This file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).
Source File: /docs/ApprovalTests/mdsource/Features.source.md
To change this file edit the source file and then run MarkdownSnippets.
-->

# ApprovalTests Features

<!-- toc -->
## Contents

  * [Approvals.AssertText](#approvalsasserttext)
  * [MachineSpecificReporter](#machinespecificreporter)
  * [ApprovalsFilename](#approvalsfilename)
  * [Making Custom Reporters](#making-custom-reporters)
  * [Environment SpecificTests](#environment-specifictests)<!-- endToc -->


## Approvals.AssertText

Watch a [Video demo of this feature](https://youtu.be/O-71uaEpCsQ)

If you prefer not to store your expectations in the `.approved.` files, you can store them directly in-line with your code.
Sample:

(Before):

<!-- snippet: assert_text_before -->
<a id='snippet-assert_text_before'></a>
```cs
var header = new Header();
var actual = header.MakeHeading("I am ten chars");
var expected = "";
Approvals.AssertText(expected, actual);
```
<sup><a href='/src/ApprovalTests.Tests/Reporters/InlineTextReporterTest.cs#L45-L50' title='Snippet source file'>snippet source</a> | <a href='#snippet-assert_text_before' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->

When you do this, it will copy the c# for the `.received.` to your clipboard, so you can paste it in-line.

(After)
<!-- snippet: assert_text -->
<a id='snippet-assert_text'></a>
```cs
var header = new Header();
var actual = header.MakeHeading("I am ten chars");
var expected = new[]{
    "**************",
    "I am ten chars",
    "**************",

};
Approvals.AssertText(expected, actual);
```
<sup><a href='/src/ApprovalTests.Tests/Reporters/InlineTextReporterTest.cs#L30-L40' title='Snippet source file'>snippet source</a> | <a href='#snippet-assert_text' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->


Currently, it put the text as an array of strings that gets concatenated as this tends to read better.

It will also write the results to a temp files on failure and open a DiffTool, so you can easily view the results and differences.


## [MachineSpecificReporter](EnvironmentSpecificTests.md#machinespecificreporter)


## ApprovalsFilename

Sometimes you want to parse an approvals filename to get the parts.

<!-- snippet: approvals_filename -->
<a id='snippet-approvals_filename'></a>
```cs
var approvalsFilename = ApprovalsFilename.Parse(@"..\Email\EmailTest.Testname.Microsoft_Windows_10_Education.approved.eml");
```
<sup><a href='/src/ApprovalTests.Tests/Namer/ApprovalsFilenameTest.cs#L6-L8' title='Snippet source file'>snippet source</a> | <a href='#snippet-approvals_filename' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->

Will produce

<!-- snippet: ApprovalsFilenameTest.TestMachineSpecificName.approved.txt -->
<a id='snippet-ApprovalsFilenameTest.TestMachineSpecificName.approved.txt'></a>
```txt
GetFullPath: ..\Email\EmailTest.Testname.Microsoft_Windows_10_Education.approved.eml
Directory: ..\Email
ClassName: EmailTest
MethodName: Testname
AdditionalInformation: [Microsoft_Windows_10_Education]
ApprovedStatus: approved
Extension: eml
```
<sup><a href='/src/ApprovalTests.Tests/Namer/ApprovalsFilenameTest.TestMachineSpecificName.approved.txt#L1-L7' title='Snippet source file'>snippet source</a> | <a href='#snippet-ApprovalsFilenameTest.TestMachineSpecificName.approved.txt' title='Start of snippet'>anchor</a></sup>
<!-- endSnippet -->


## [Making Custom Reporters](Reporters.md##making-custom-reporters)


## [Environment SpecificTests](EnvironmentSpecificTests.md#environmentspecifictest)

---

[Back to User Guide](readme.md#top)